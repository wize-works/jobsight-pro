name: Build and Deploy to AKS

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: jobsight-pro

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
      issues: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Get released version from git tag
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  docker-build-and-push:
    name: Build and Push Docker Image
    needs: release
    if: needs.release.outputs.version != ''
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set VERSION from previous job
        id: set_version
        run: echo "version=${{ needs.release.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker to use ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Docker Build and Tag
        run: |
          docker build --no-cache \
            --build-arg NODE_ENV=production \
            --build-arg KINDE_CLIENT_ID=${{ secrets.KINDE_CLIENT_ID }} \
            --build-arg KINDE_CLIENT_SECRET=${{ secrets.KINDE_CLIENT_SECRET }} \
            --build-arg KINDE_ISSUER_URL=${{ secrets.KINDE_ISSUER_URL }} \
            --build-arg KINDE_DOMAIN=${{ secrets.KINDE_DOMAIN }} \
            --build-arg KINDE_SITE_URL=${{ secrets.KINDE_SITE_URL }} \
            --build-arg KINDE_LOGOUT_REDIRECT_URI=${{ secrets.KINDE_LOGOUT_REDIRECT_URI }} \
            --build-arg KINDE_POST_LOGOUT_REDIRECT_URL=${{ secrets.KINDE_POST_LOGOUT_REDIRECT_URL }} \
            --build-arg KINDE_REDIRECT_URI=${{ secrets.KINDE_REDIRECT_URI }} \
            --build-arg KINDE_POST_LOGIN_REDIRECT_URL=${{ secrets.KINDE_POST_LOGIN_REDIRECT_URL }} \
            --build-arg OPENWEATHER_API_KEY=${{ secrets.OPENWEATHER_API_KEY }} \
            --build-arg NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }} \
            --build-arg SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
            --build-arg SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }} \
            --build-arg NEXT_PUBLIC_VAPID_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_VAPID_PUBLIC_KEY }} \
            --build-arg VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }} \
            --build-arg AZURE_STORAGE_ACCOUNT=${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --build-arg AZURE_STORAGE_KEY=${{ secrets.AZURE_STORAGE_KEY }} \
            --build-arg AZURE_STORAGE_ENDPOINT=${{ secrets.AZURE_STORAGE_ENDPOINT }} \
            --build-arg NEXT_PUBLIC_CLARITY_ID=${{ secrets.NEXT_PUBLIC_CLARITY_ID }} \
            --build-arg RESEND_API_KEY=${{ secrets.RESEND_API_KEY }} \
            --build-arg SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} \
            --build-arg STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            --build-arg NEXT_PUBLIC_STRIPE_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLIC_KEY }} \
            --build-arg STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }} \
            --label org.opencontainers.image.revision=${{ github.sha }} \
            --label org.opencontainers.image.version=${{ needs.release.outputs.version }} \
            -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }} \
            .

          docker tag ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }} ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

      - name: Docker Push
        run: |
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }}
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

  aks-deploy:
    name: Deploy to AKS
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    permissions:
      contents: write
      deployments: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install kubelogin
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: v0.0.25

      - name: Set AKS Context with admin access
        uses: azure/aks-set-context@v4
        with:
          cluster-name: ${{ secrets.AKS_CLUSTER }}
          resource-group: ${{ secrets.AZURE_RG }}
          admin: true

      - name: Create Kubernetes secret for app
        run: |
          kubectl create secret generic jobsight-secrets \
            --namespace=jobsight \
            --from-literal=KINDE_CLIENT_ID="${{ secrets.KINDE_CLIENT_ID }}" \
            --from-literal=KINDE_CLIENT_SECRET="${{ secrets.KINDE_CLIENT_SECRET }}" \
            --from-literal=KINDE_ISSUER_URL="${{ secrets.KINDE_ISSUER_URL }}" \
            --from-literal=KINDE_DOMAIN="${{ secrets.KINDE_DOMAIN }}" \
            --from-literal=KINDE_SITE_URL="${{ secrets.KINDE_SITE_URL }}" \
            --from-literal=KINDE_LOGOUT_REDIRECT_URI="${{ secrets.KINDE_LOGOUT_REDIRECT_URI }}" \
            --from-literal=KINDE_POST_LOGOUT_REDIRECT_URL="${{ secrets.KINDE_POST_LOGOUT_REDIRECT_URL }}" \
            --from-literal=KINDE_REDIRECT_URI="${{ secrets.KINDE_REDIRECT_URI }}" \
            --from-literal=KINDE_POST_LOGIN_REDIRECT_URL="${{ secrets.KINDE_POST_LOGIN_REDIRECT_URL }}" \
            --from-literal=OPENWEATHER_API_KEY="${{ secrets.OPENWEATHER_API_KEY }}" \
            --from-literal=NEXT_PUBLIC_APP_URL="${{ secrets.NEXT_PUBLIC_APP_URL }}" \
            --from-literal=SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
            --from-literal=SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            --from-literal=NEXT_PUBLIC_VAPID_PUBLIC_KEY="${{ secrets.NEXT_PUBLIC_VAPID_PUBLIC_KEY }}" \
            --from-literal=VAPID_PRIVATE_KEY="${{ secrets.VAPID_PRIVATE_KEY }}" \
            --from-literal=AZURE_STORAGE_ACCOUNT="${{ secrets.AZURE_STORAGE_ACCOUNT }}" \
            --from-literal=AZURE_STORAGE_KEY="${{ secrets.AZURE_STORAGE_KEY }}" \
            --from-literal=AZURE_STORAGE_ENDPOINT="${{ secrets.AZURE_STORAGE_ENDPOINT }}" \
            --from-literal=NEXT_PUBLIC_CLARITY_ID="${{ secrets.NEXT_PUBLIC_CLARITY_ID }}" \
            --from-literal=RESEND_API_KEY="${{ secrets.RESEND_API_KEY }}" \
            --from-literal=SENTRY_AUTH_TOKEN="${{ secrets.SENTRY_AUTH_TOKEN }}" \
            --from-literal=STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
            --from-literal=STRIPE_WEBHOOK_SECRET="${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
            --from-literal=NEXT_PUBLIC_STRIPE_PUBLIC_KEY="${{ secrets.NEXT_PUBLIC_STRIPE_PUBLIC_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Convert kubeconfig to use Azure CLI token
        run: kubelogin convert-kubeconfig -l azurecli

      - name: Create GitHub deployment
        id: create_deployment
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ github.ref_name == 'main' && 'production' || 'development' }}
          ref: ${{ github.ref }}

      - name: Render deployment.yaml with secrets
        run: |
          echo "IMAGE_TAG=${{ needs.docker-build-and-push.outputs.version }}" >> $GITHUB_ENV
          envsubst < deployment/deployment.yaml > deployment/deployment.final.yaml
        env:
          IMAGE_TAG: ${{ needs.docker-build-and-push.outputs.version }}
          ACR_NAME: ${{ secrets.ACR_NAME }}

      - name: Deploy to AKS
        run: |
          kubectl apply -f deployment/deployment.final.yaml
          kubectl apply -f deployment/service.yaml
          kubectl apply -f deployment/ingress.yaml
          kubectl rollout status deployment/${{ env.IMAGE_NAME }} -n jobsight

      - name: Mark deployment as successful
        if: success()
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: success
          env: ${{ github.ref_name == 'main' && 'production' || 'development' }}
          deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
