// PROMPT START
/*
You're building a full-stack construction project management web application called **JobSight** using the following technologies:

- Framework: Next.js v15+ (App Router)
- Styling: TailwindCSS v4.1+ and DaisyUI v5.0+ with custom `light` and `dark` themes
- Icons: FontAwesome v6.7+
- Charts: ChartJS for visualizing data (e.g., task progress, equipment usage)
- Authentication: Clerk.dev (email/password login, role-based access, multi-tenant support)
- Observability: Sentry (frontend error tracking, breadcrumbs, environment context)

The app should include:

1. A **responsive dashboard layout** with a collapsible sidebar and header (dark/light mode toggle)
2. **Authentication flow** using Clerk (public routes, protected routes, role-based access)
3. **Core pages**:
   - `/projects`: list + create/manage projects
   - `/tasks`: tasks by project, status filter
   - `/logs`: daily logs with photos and notes
   - `/media`: image/document/video uploads using a reusable component
   - `/crew`: crew list, assignments, and scheduling
   - `/equipment`: equipment tracking by status
4. **Reusable components**:
   - Cards for project/task summaries
   - Modal forms for creating new items
   - Chart components using ChartJS
   - Theme-aware UI (matches custom DaisyUI themes)
5. **Folder structure** organized by feature (e.g., `/app/projects`, `/components/shared`, `/lib/clerk`)

Use Tailwind utility classes and DaisyUI components where possible. Enable dynamic routing with App Router. Include error boundaries and Sentry initialization in `_app.tsx`. Scaffold the layout and pages using modern patterns (e.g., layout.tsx, loading.tsx, client/server components split).

Generate the base structure, auth layout, and UI shell to get started.
*/
// PROMPT END
